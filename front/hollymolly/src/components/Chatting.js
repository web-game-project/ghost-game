import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import ChatContext from '../components/ChatContext';
import style from '../styles/styles';

const Chatting = (props) => { 

    const [recentChatColor, setRecentChatColor] = useState(); // Í∏∞Î≥∏ ÌôîÏù¥Ìä∏ ÏÉâ
    
    // ÏûÖÎ†•Îêú Ï±ÑÌåÖ Î©îÏãúÏßÄ ÏÉÅÌÉú Í∞í
    const [inputMessage, setInputMessage] = useState('');

    // ÏûÖÎ†•Îêú Ï±ÑÌåÖ Î©îÏãúÏßÄ ÏÑúÎ≤ÑÏóê Î≥¥ÎÇ¥Îäî ÏÉÅÌÉú Í∞í 
    const [emitMessage, setEmitMessage] = useState(false);

    // Î°úÏª¨Ïùò ÏûÖÏû•ÏóêÏÑú Í≥ÑÏÜç Ï†ÑÏ≤¥ Í∞íÏù¥ Î∞îÎÄåÎäî Í≤ÉÏù¥Í∏∞Ïóê ÎÇ¥Ïö© Ï†ÑÏ≤¥Í∞Ä Îã§Ïãú Î†åÎçîÎßÅ ÎêòÎäî Í≤ÉÏùÑ ÎßâÍ∏∞ ÏúÑÌï¥ ÏÉÅÌÉúÍ∞íÏùÑ Îëê Ï¢ÖÎ•òÎ°ú ÎÇòÎàÑÏñ¥ Í¥ÄÎ¶¨

    // ÌïòÎÇòÎäî Í∏∞Ï°¥Ïùò Ï±ÑÌåÖ ÎÇ¥Ïö©ÏùÑ Îã¥ÏïÑÎëêÍ≥† UIÏôÄ ÏßÅÏ†ë Ïó∞Í≤∞ÎêòÎäî ÏÉÅÌÉúÍ∞í
    const [chatMonitor, setChatMonitor] = useState(props.chats);

    // ÏÑúÎ≤ÑÏóêÏÑú Î©îÏãúÏßÄ Î∞õÏïòÏùÑ Îïå Î≥ÄÍ≤ΩÎêòÎäî ÏÉÅÌÉúÍ∞í 
    const [onMessage, setOnMessage] = useState(false);

    // ÎÇòÎ®∏ÏßÄ ÌïòÎÇòÎäî ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ Í∞±Ïã†Îêú(ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú) ÎÇ¥Ïö©ÏùÑ Î∞õÎäî ÏÉÅÌÉúÍ∞í
    const [recentChat, setRecentChat] = useState("");

    // ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ Í∞±Ïã†Îêú(ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú) Ïú†Ï†Ä Ïù¥Î¶ÑÏùÑ Î∞õÎäî ÏÉÅÌÉúÍ∞í
    const [recentChatUserName, setRecentChatUserName] = useState('');

    // ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ Í∞±Ïã†Îêú(ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú) Ïú†Ï†Ä Ïù∏Îç±Ïä§ Î∞õÎäî ÏÉÅÌÉúÍ∞í
    const [recentChatUserIdx, setRecentChatUserIdx] = useState('');

    

    // ÏßÄÏ†ï ÏÉâ ÏΩîÎìúÎ°ú Î∞îÍøîÏ£ºÍ∏∞ 
    let user_color = props.color; 
    
    if(user_color === 'RED'){
        user_color = style.red_bg;
    }else if(user_color === 'ORANGE'){
        user_color = style.orange_bg;
    }else if(user_color === 'YELLOW'){
        user_color = style.yellow_bg;
    }else if(user_color === 'GREEN'){
        user_color = style.green_bg;
    }else if(user_color === 'BLUE'){
        user_color = style.blue_bg;
    }else if(user_color === 'PINK'){
        user_color = style.pink_bg;
    }else if(user_color === 'WHITE'){
        user_color = '#FFFFFF'
    }else{
        user_color = style.purple_bg;
    }

    // ÏûÖÎ†•Í∞íÏùÑ Ï†ÄÏû•ÌïòÎäî ÏÉÅÌÉúÍ∞í
    const handleInput = (e) => {
        let textValue = e.target.value.replace(/^\s*/, "");
        setInputMessage(textValue);
    };

    // ÏóîÌÑ∞ Ïãú, ÏûÖÎ†•Í∞íÏùÑ ÏÑúÎ≤ÑÎ°ú Î≥¥ÎÇ¥Îäî Ìï®Ïàò
    const handleEnter = (e) => {
        if (e.key === 'Enter') {
            if (inputMessage.length > 0) {
                let msg = inputMessage;

                let getMsgInfo = {
                    user_color: user_color,
                    msg: msg
                }

                props.socket.emit("chat", getMsgInfo);

                setEmitMessage(!emitMessage);
                setInputMessage('');
            }
            
        }
    };

    // Ï†ÑÏÜ° Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú, ÏûÖÎ†•Í∞íÏùÑ ÏÑúÎ≤ÑÎ°ú Î≥¥ÎÇ¥Îäî Ìï®Ïàò
    const handleSubmit = () => {
        if (inputMessage.length > 0) {
            let msg = inputMessage;

            let sendMsgInfo = {
                user_color: user_color,
                msg: msg
            }

            props.socket.emit("chat", sendMsgInfo);

            setInputMessage('');
            setEmitMessage(!emitMessage);
        }
    };

    // ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ ÏûÖÎ†•Í∞íÏùÑ Î°úÏª¨ ÏÉÅÌÉúÍ∞íÏúºÎ°ú Í∞±Ïã†ÌïòÎäî Ìï®Ïàò(Î∞îÎ°ú Î∞ëÏùò Ìï®ÏàòÎ°ú Ïó∞Í≤∞ÎêúÎã§)

    useEffect(() => {
        props.socket.on('connect', () => {
            //console.log('chatting connection server');
        });
        
        props.socket.on("chat", (data) => {
            setRecentChatColor(data.user_color);
            setRecentChatUserName(data.user_name);
            setRecentChat(data.msg);
            setRecentChatUserIdx(data.user_idx);

            setOnMessage(true);

        });

        props.socket.on('exit room', (data) => {
            if(data.user_name !== undefined){
                let msg = data.user_name + " ÎãòÏù¥ Ìá¥Ïû•ÌïòÏÖ®ÏäµÎãàÎã§."

                setRecentChatColor('#fff');
                setRecentChatUserName('üì¢ Í¥ÄÎ¶¨Ïûê');
                setRecentChat(msg);
                setRecentChatUserIdx('00');

                setOnMessage(true);
            }else{
                let msg = data.user_idx + " ÎãòÏù¥ Ìá¥Ïû•ÌïòÏÖ®ÏäµÎãàÎã§."

                setRecentChatColor('#fff');
                setRecentChatUserName('üì¢ Í¥ÄÎ¶¨Ïûê');
                setRecentChat(msg);
                setRecentChatUserIdx('00');

                setOnMessage(true);
            }
            
        });

    }, []);

    // Ïä§ÌÅ¨Î°§ÏùÑ ÌïòÎã®ÏúºÎ°ú Ïù¥ÎèôÏãúÌÇ§Îäî Ìï®Ïàò
    const scrollToBottom = () => {
        document.getElementById('chatMonitor').scrollBy({ top: 100 });
    };

    // Í∞±Ïã† ÌõÑ, Ïä§ÌÅ¨Î°§ÏùÑ ÌïòÎã®ÏúºÎ°ú Ïù¥ÎèôÏãúÌÇ§Í∏∞ ÏúÑÌï¥, async, await Íµ¨Î¨∏ÏùÑ ÌôúÏö©Ìï¥ÏÑú ÏïÑÎûò Ìï®ÏàòÍ∞Ä Ï±ÑÌåÖÎ∞©Ïù¥ Í∞±Ïã†ÎêòÍ≥† ÎÇòÏÑú Ïã§ÌñâÎêòÎèÑÎ°ù ÏÑ§Ï†ï
    useEffect( () => {
        const scrollUpdate = async () => {
        // ÏÉàÎ°úÏö¥ Ï±ÑÌåÖ ÎÇ¥Ïö© Í∞±Ïã† 
        (await recentChat.length) > 0 && setChatMonitor([...chatMonitor, {recentChat, recentChatUserName, recentChatColor}]); 
        
        // await Î∞ëÏóê Ïä§ÌÅ¨Î°§ Ìï®Ïàò ÏúÑÏπò
        scrollToBottom();
        setRecentChat('');
        };

        //console.log(chatMonitor);

        scrollUpdate();
    }, [recentChat]);

  return (
    <React.Fragment>
            <Container style={{height : props.height}}>
                <ChatContainer id="chatMonitor">
                    {/* 18Í∞úÎ∂ÄÌÑ∞ Ïä§ÌÅ¨Î°§ ÏÉùÍπÄ */}
                    {chatMonitor.map((values, index) => {          
                        return (<ChatContext key={index} name={values.recentChatUserName} color={values.recentChatColor} text={values.recentChat}></ChatContext>);
                    })}
                </ChatContainer>
                <InputMsgContainer>
                {props.available?
                    <InputMsg
                        type="text"
                        placeholder="Ï±ÑÌåÖ ÏÇ¨Ïö© Í∞ÄÎä• üòä"
                        value={inputMessage}
                        onChange={handleInput}
                        onKeyPress={handleEnter}
                    ></InputMsg> :
                    <InputMsg
                        type="text"
                        placeholder="Ï±ÑÌåÖ ÏÇ¨Ïö© Î∂àÍ∞Ä üòß"
                        value={inputMessage}
                        onChange={handleInput}
                        onKeyPress={handleEnter}
                        disabled={true}
                    ></InputMsg>

                }
                    <InputMsgBtn onClick={handleSubmit}>üöÄ</InputMsgBtn>
                </InputMsgContainer>
            </Container>
    </React.Fragment>
);
};

const Container = styled.div`
    font-family: Gowun Dodum;
    width: 220px;
    height: 620px;
    display: flex;
    justify-content: space-between;
    flex-direction: column;
    color: white;
    opacity: 1.5;
    font-weight: bold;
`;

const ChatContainer = styled.div`
    font-family: Gowun Dodum;
    width: 200px;
    height: 520px;
    padding: 10px;
    margin-bottom: 20px;
    background-color: rgba( 0, 0, 0, 0.5 );
    border-radius: 0.5rem;
    // overflow-y: scroll;
    // overflow-x:hidden;
    overflow: auto;
    &::-webkit-scrollbar {
        /* ÏÑ∏Î°ú Ïä§ÌÅ¨Î°§ ÎÑìÏù¥ */
        width: 10px;

        /* Í∞ÄÎ°ú Ïä§ÌÅ¨Î°§ ÎÜíÏù¥ */
        height: 10px;

        border-radius: 6px;
        background: rgba(255, 255, 255, 0.4);
    }
    &::-webkit-scrollbar-thumb {
        background-color: rgba(0, 0, 0, 0.5);
        border-radius: 6px;
    }
`;

const InputMsgContainer = styled.div`
    font-family: Gowun Dodum;
    width: 200px;
    height: 80px;
    padding: 10px;
    background-color: rgba( 0, 0, 0, 0.5 );
    border-radius: 0.5rem;
    display: flex;
    justify-content: space-between;
    font-weight: bold;
`;

const InputMsg = styled.textarea`
    font-family: Gowun Dodum;
    width: 160px;
    height: 60px;
    padding: 10px;
    background-color: #000000;
    border-radius: 0.5rem;
    margin-right: 7px;
    border: none;
    outline: none !important;
    resize: none;
    font-weight: bold;

    &:hover {
        cursor: grab;
    }

    ::placeholder {
        color: white;
        font-weight: bold;
    }
    color: white;

    overflow-y: scroll;
    &::-webkit-scrollbar {
        /* ÏÑ∏Î°ú Ïä§ÌÅ¨Î°§ ÎÑìÏù¥ */
        width: 10px;

        /* Í∞ÄÎ°ú Ïä§ÌÅ¨Î°§ ÎÜíÏù¥ */
        height: 10px;

        border-radius: 6px;
        background: rgba(255, 255, 255, 0.4);
    }
    &::-webkit-scrollbar-thumb {
        background-color: rgba(0, 0, 0, 0.3);
        border-radius: 6px;
    }
`;

const InputMsgBtn = styled.div`
    font-family: Gowun Dodum;
    width: 40px;
    height: 80px;
    background-color: #000000;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;

    &:hover {
        cursor: grab;
    }
`;

export default Chatting;